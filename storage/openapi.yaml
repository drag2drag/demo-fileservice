openapi: 3.0.2
info:
  title: Product API Beiersdorf
  description: |-
    Product API based on the OpenAPI 3.0 specification. 
  contact:
    email: dragisa.dragisic.external@beiersdorf.com
  license:
    name: Beiersdorf AG
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: https://api.beiersdorf.com/products
paths:
  /products:
    put:
      tags:
        - products
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      requestBody:
        description: Update an existent product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '405':
          description: Validation exception
      security:
        - product_auth:
            - write:products
            - read:products
    post:
      tags:
        - products
      summary: Add a new product 
      description: Add a new product
      operationId: addProduct
      requestBody:
        description: Create a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '201':
          description: Created a new product Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid input
      security:
        - product_auth:
            - write:products
            - read:products
  /products/{productId}:
    get:
      tags:
        - products
      summary: Find product by Id
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
      security:
        - api_key: []
        - product_auth:
            - write:products
            - read:products
    post:
      tags:
        - products
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: productId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - product_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - products
      summary: Deletes a product
      description: ''
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid product id
      security:
        - product_auth:
            - write:pets
            - read:pets
components:
  schemas:
    Product:
      required:
        - name
        - status
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: nivea
        status:
          type: string
          description: product status at the stock
          enum:
            - available
            - pending
            - sold
  requestBodies:
    Product:
      description: Product object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
  securitySchemes:
    product_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://api.beiersdorf.com/oauth/authorize
          scopes:
            write:products: modify products in your account
            read:products: read your products
    api_key:
      type: apiKey
      name: api_key
      in: header
